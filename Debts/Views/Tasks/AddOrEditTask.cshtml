@using Debts.ViewModels
@model TaskViewModel

@using (Html.BeginForm("AddOrEditTask", "Tasks", FormMethod.Post, new { @class = "form", role = "form"}))
{
    @Html.HiddenFor(m => m.TaskId)
    @Html.HiddenFor(m => m.UserId)

    @Html.LabelFor(m => m.Name, new { @class = "" })
    @Html.TextBoxFor(m => m.Name)
    @Html.ValidationMessageFor(m => m.Name)

    @Html.LabelFor(m => m.Sum, new { @class = "" })
    @Html.TextBoxFor(m => m.Sum, new { onkeyup="changeSum()"})
    @Html.ValidationMessageFor(m => m.Sum)


    <div id="divMembers">
        <label>Members</label>
        @foreach (var key in Model.Members.Keys)
        {
            @Html.Partial("AddMember", new EditTaskMemberViewModel(Model.Members, key))
        }
    </div>

    <button type="button" onclick="AddMemberButton()" class="btn btn-danger">Add Member</button>



    <input type="submit" class="frm-btn btn btn-danger" value="Save" />

}

<div id="divNewMemberTemplate" class="hide" hidden="hidden">
    @Html.Partial("AddMember", new EditTaskMemberViewModel(null, int.MaxValue.ToString()))
</div>

<script type="text/javascript">

    var slotsCount = @(Model.Members.Count);

    function AddMemberButton() {
        var template = $('#divNewMemberTemplate');
        var timeSlotIndex = slotsCount;
        var newTimeSlot = $(template.html().replace(new RegExp('@int.MaxValue', 'g'), timeSlotIndex));
        $('#divMembers').append(newTimeSlot);
        slotsCount++;
        changeSum();
    }

    function removeMember(btn) {
        console.log("remove");
        $(btn).closest('[data-member-row]').remove();
        changeSum();
    }

    function changeSum() {
        var sumInput = document.getElementById("Sum").value;
        console.log(sumInput);

        //get all inputs with "debts"
        var debtsInputs = document.getElementsByClassName("debt");
        var debtsLength = debtsInputs.length - 1;

        //calculate basic value
        var basicValueWithError = parseFloat((sumInput / debtsLength).toFixed(2));

        //calculate sum value with error
        var sumWithError = basicValueWithError * debtsLength;

        //get error
        var error = parseFloat((sumInput - sumWithError).toFixed(2));

        //global iterator for set correct debt value
        var iterator = 0;
        if (error != 0) {
            //check sing in error
            var sign = (error >= 0) ? true : false;
            while (error != 0) {
                //check sign and inc or dec value for correct value
                switch (sign) {
                    case false:
                        error += 0.01;
                        debtsInputs[iterator].value = parseFloat(basicValueWithError - 0.01).toFixed(2);
                        break;

                    case true:
                        error -= 0.01;
                        debtsInputs[iterator].value = parseFloat(basicValueWithError + 0.01).toFixed(2);
                        break;
                }
                iterator++;
            }
        }

        //set value for other inputs, if needed
        while (iterator <= debtsLength) {
            debtsInputs[iterator].value = basicValueWithError;
            iterator++;
        }
    }

    function changeDebt() {
        console.log("change debt trigger");
        var debtsInputs = document.getElementsByClassName("debt");
        for (var iterator = 0; iterator < debtsInputs.length-1; iterator++) {
            console.log(debtsInputs[iterator].value);
        }
        //console.log(debtsInputs);
    }

    function changeDeposit() {
        console.log("change deposit trigger");
        var depositInputs = document.getElementsByClassName("deposit");
        for (var iterator = 0; iterator < depositInputs.length-1; iterator++) {
            console.log(depositInputs[iterator].value);
        }
        //console.log(debtsInputs);
    }

</script>
