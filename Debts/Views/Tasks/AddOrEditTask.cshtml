@using Debts.ViewModels
@model TaskViewModel

@using (Html.BeginForm("AddOrEditTask", "Tasks", FormMethod.Post, new { @class = "form", role = "form", id = "fromAddOrEditTask", onsubmit = "return false" }))
{
    <h4>
        @if (string.IsNullOrEmpty(Model.Name))
        {
            @:Add task
        }
        else
        {
            @:Edit @Model.Name
        }
    </h4>
    <div class="form-inline">
        @Html.HiddenFor(m => m.TaskId)
        @Html.HiddenFor(m => m.UserId)
        <div class="form-inline m-2">
            @Html.LabelFor(m => m.Name, new { @class = "" })
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="form-inline m-2">
            @Html.LabelFor(m => m.Sum, new { @class = "" })
            @Html.TextBoxFor(m => m.Sum, new { onkeyup = "changeSum()", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Sum)
        </div>
    </div>

    <div id="divMembers">
        <h4>Members</h4>
        @foreach (var key in Model.Members.Keys)
        {
            @Html.Partial("AddMember", new EditTaskMemberViewModel(Model.Members, key))
        }
    </div>

    <button type="button" onclick="AddMemberButton()" class="btn btn-primary">Add Member</button>



    <input type="submit" class="btn btn-success" onclick="saveDebts()" value="Save" />

}

<div id="divNewMemberTemplate" class="hide" hidden="hidden">
    @Html.Partial("AddMember", new EditTaskMemberViewModel(null, int.MaxValue.ToString()))
</div>

<script type="text/javascript">

    var slotsCount = @(Model.Members.Count);

    function AddMemberButton() {
        var template = $('#divNewMemberTemplate');
        var timeSlotIndex = slotsCount;
        var newTimeSlot = $(template.html().replace(new RegExp('@int.MaxValue', 'g'), timeSlotIndex));
        $('#divMembers').append(newTimeSlot);
        slotsCount++;
        changeSum();

    }

    function removeMember(btn) {
        console.log("remove");
        $(btn).closest('[data-member-row]').remove();
        changeSum();
    }

    function changeSum() {

        //value in sum field
        var sumInputElem = document.getElementById("Sum");
        var sumInput = sumInputElem.value;

        //change first field "deposit"
        var depositInputs = document.getElementsByClassName("deposit");
        depositInputs[0].value = sumInput;
        changeDeposit();

        //get all inputs with manual edit value
        var debtsEditInputs = document.getElementsByClassName("debtediting");

        if (debtsEditInputs.length != 0) {
            var debtsEditSum = 0;
            //caclulate sum without this fields
            debtsEditSum = CalculateSum(debtsEditInputs, debtsEditInputs.length);

            sumInput -= debtsEditSum;
            if (sumInput < 0) {
                sumInputElem.style.color = "red";
                return;
            } else {
                sumInputElem.style.color = "black";
            }
        }
        

        //get all inputs with "debts"
        var debtsInputs = document.getElementsByClassName("debt");
        var debtsLength = debtsInputs.length - 1;

        //calculate basic value
        var basicValueWithError = parseFloat((sumInput / debtsLength).toFixed(2));

        //calculate sum value with error
        var sumWithError = basicValueWithError * debtsLength;

        //get error
        var error = parseFloat((sumInput - sumWithError).toFixed(2));

        //global iterator for set correct debt value
        var iterator = 0;
        if (error != 0) {
            //check sing in error
            var sign = (error >= 0) ? true : false;
            while (error != 0) {
                //check sign and inc or dec value for correct value
                switch (sign) {
                    case false:
                        error += 0.01;
                        debtsInputs[iterator].value = parseFloat(basicValueWithError - 0.01).toFixed(2);
                        break;

                    case true:
                        error -= 0.01;
                        debtsInputs[iterator].value = parseFloat(basicValueWithError + 0.01).toFixed(2);
                        break;
                }
                iterator++;
            }
        }

        //set value for other inputs, if needed
        while (iterator <= debtsLength) {
            debtsInputs[iterator].value = basicValueWithError;
            iterator++;
        }
    }

    function changeDebt(editedInput) {
        editedInput.className += "editing";
        //var debtsInputs = document.getElementsByClassName("debt");
        //for (var iterator = 0; iterator < debtsInputs.length-1; iterator++) {
        //}
    }


    function changeDeposit() {
        var sumInput = document.getElementById("Sum");

        var depositInputs = document.getElementsByClassName("deposit");

        var sumDeposits = CalculateSum(depositInputs, depositInputs.length - 1);

        if (sumDeposits < sumInput.value) {
            sumInput.style.color = "red";
        } else {
            sumInput.style.color = "black";
        }
    }

    function saveDebts() {

        var sumInput = document.getElementById("Sum");
        var depositInputs = document.getElementsByClassName("deposit");

        var depositsSum = CalculateSum(depositInputs, depositInputs.length - 1);
        if (sumInput.value != depositsSum) {
            alert('Sum of deposits not equal Task sum');
            return;
        }

        $.ajax({
            url: '@Url.Action("AddOrEditTask","Tasks")',
            data: $('#fromAddOrEditTask').serialize(),
            type: 'POST',
            async: false,
            success: function (response) {
                window.location = response;
            }
        });
    }

    //replace all sum calc
    function CalculateSum(inputs, length) {
        var sum = 0;
        for (var iterator = 0; iterator < length; iterator++) {
            sum += parseFloat(inputs[iterator].value);
        }
        return sum;
    }

</script>
