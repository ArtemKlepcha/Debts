@using Debts.ViewModels
@model EditTaskMemberViewModel

<div id="AddMemberModal" role="dialog" data-member-row>
    @*@if (Model.Members!=null && Model.Key == int.MaxValue.ToString())
    {
        <input data-val="true" data-val-required="The MemberId field is required." id="@Model.Members[Model.Key].MemberId" name="@Model.Members[Model.Key].MemberId" type="hidden" value="@Guid.Empty">
    }
    else
    {
        <input data-val="true" data-val-required="The MemberId field is required." id="@Model.Members[Model.Key].MemberId" name="@Model.Members[Model.Key].MemberId" type="hidden" value="@Model.Members[Model.Key].MemberId">
    }*@

    <div class="form-inline">
        @(Model.Key == int.MaxValue.ToString() ? Html.HiddenFor(m => m.Members[Model.Key].MemberId, new { value = Guid.Empty }) : Html.HiddenFor(m => m.Members[Model.Key].MemberId))
        <div class="form-inline m-2">
            @Html.LabelFor(m => m.Members[Model.Key].Name)
            @Html.TextBoxFor(m => m.Members[Model.Key].Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Members[Model.Key].Name)
        </div>
        <div class="form-inline m-2">
            @Html.LabelFor(m => m.Members[Model.Key].Deposit)
            @Html.TextBoxFor(m => m.Members[Model.Key].Deposit, "", new { onchange = "changeDeposit()", @class = "form-control deposit", })
            @Html.ValidationMessageFor(m => m.Members[Model.Key].Deposit)
        </div>
        <div class="form-inline m-2">
            @Html.LabelFor(m => m.Members[Model.Key].Debt)
            @Html.TextBoxFor(m => m.Members[Model.Key].Debt, "", new { onchange = "changeDebt(this)", @class = "saveDebt form-control debt" })
            @Html.ValidationMessageFor(m => m.Members[Model.Key].Debt)
        </div>
        <button class="btn btn-danger" role="button" type="button" onclick="removeMember(this)">×</button>
    </div>

</div>