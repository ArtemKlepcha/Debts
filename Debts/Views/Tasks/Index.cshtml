@using Debts.ViewModels
@model TaskListViewModel

@{
    ViewData["Title"] = "Index";
}
@{
    int i = 1;
    int j = 1;
}

<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>
                Имя
            </th>
            <th>
                Сумма
            </th>
            <th>
                Участники
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Tasks)
        {
            <tr>
                <td>

                    @Html.ActionLink(item.Name, "AddOrEditTask", "Tasks", new { id = i })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sum)
                </td>
                <td>
                    @foreach (var mem in item.Members)
                    {
                        @Html.ActionLink(mem.Name, "Index", "Debt", new { taskID = i, memberID = j })
                        @:&nbsp;
                        j++;
                    }
                    @{ j = 1; }
                </td>
                <td class="removetask">
                    <button id="@item.Id" type="button" onclick="Delete(this)" class="btn btn-danger">×</button>
                </td>
            </tr>
            
            i++;
        }
    </tbody>
</table>
<a class="btn btn-primary" asp-action="AddOrEditTask">Add new</a>

<script>
    function Delete(guidButton) {
        $.ajax({
            url: '@Url.Action("DeleteTask","Tasks")',
            data: {id: guidButton.id},
            type: 'POST',
            async: false,
            success: function () {
                window.location = "/";
            }
        });
    }
</script>